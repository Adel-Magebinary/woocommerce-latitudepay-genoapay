<?php

namespace Latitude\Tests\Wpunit;
use Codeception\Exception\ModuleException;
use tad\WPBrowser\Module\WPLoader\FactoryStore;


/**
 * Class VulnerabilityWithLatitudePayTest
 * @package Latitude\Tests\Wpunit
 */
class VulnerabilityWithLatitudePayTest extends LatitudePay
{
    /**
     * FAIL URL vulnerability test (Url query parameter manipulation test)
     * change result from Fail->Success (validate_response_signature() fail)
     * @test
     */
    public function userShouldNotBeAbleToManipulateUrlParameter()
    {
        // Create order and process payment as usual until redirected to Gpay portal
        $this->tester->createApiTokenSuccess();
		$this->tester->createApiPurchaseSuccess();
        WC()->cart->empty_cart();
        WC()->cart->add_to_cart( $this->simple_product->get_id(), 3 );
        WC()->cart->calculate_totals();
        $order = $this->tester->create_order();
        $result = $this->gateway->process_payment($order->get_id()); // order_id and purchase_token in session now
        
        // Return from Gpay portal with failed param
        $_GET = [
            'result' => \BinaryPay_Variable::STATUS_FAILED,
            'message' => 'The customer cancelled the purchase',
            'wc-api' => 'latitudepay_return_action',
            'token' => 'xxxxxxxxxxx', 
            'reference' => $order->get_id()
        ];
        $_GET['signature'] = $this->generate_signature($_GET); 

        // User intercepted and changed the result parameter
        $_GET['result'] = \BinaryPay_Variable::STATUS_COMPLETED;

        // return_action() should stop it at signature check, token will be unset at this point
        $this->gateway->return_action();
        $notices = wc_get_notices( 'error' );
        $this->assertIsArray($notices);
        if(is_array($notices[0]) && isset($notices[0]['notice'])){
            $this->assertEquals($notices[0]['notice'], 'The return action handler is not valid for the request.');
        } else {
            $this->assertEquals($notices[0], 'The return action handler is not valid for the request.');
        }
    }

     /**
     * Old success url vulnerability test
     * process a new order until the payment gateway, order id and purchase token in session, but old success url used
     * @test
     */
    public function userShouldNotBeAbleToReuseOldSuccessUrl()
    {
        // Create order and process payment as usual until redirected to Gpay portal
        $this->tester->createApiTokenSuccess();
		$this->tester->createApiPurchaseSuccess();
        WC()->cart->empty_cart();
        WC()->cart->add_to_cart( $this->simple_product->get_id(), 3 );
        WC()->cart->calculate_totals();
        $orderA = $this->tester->create_order();
        $result = $this->gateway->process_payment($orderA->get_id()); // order_id and purchase_token in session now
        
        // Return from Gpay portal with success param
        $_GET = [
            'result' => \BinaryPay_Variable::STATUS_COMPLETED,
            'message' => 'The customer cancelled the purchase',
            'wc-api' => 'latitudepay_return_action',
            'token' => 'xxxxxxxxxxx', 
            'reference' => $orderA->get_id()
        ];
        $_GET['signature'] = $this->generate_signature($_GET); 
    
        // Make sure return action successful, token will be unset at this point
        $this->gateway->return_action();
        $notices = wc_get_notices( 'error' );
        $this->assertEmpty($notices);
        $headers = xdebug_get_headers();
        $this->assertContains(
            "X-Redirect-By: WordPress",
            $headers
        );
        $this->assertRegExp(
            "/order-received/",
            json_encode($headers)
        );

        // Create order and process payment again until gateway
        $this->tester->createApiTokenSuccess();
        $this->tester->createApiPurchaseSuccess();
        WC()->cart->empty_cart();
        WC()->cart->add_to_cart( $this->simple_product->get_id(), 3 );
        WC()->cart->calculate_totals();
        $orderB = $this->tester->create_order();
        $result = $this->gateway->process_payment($orderB->get_id()); // order_id and purchase_token in session updated

        // try to copy and paste success url with old $_GET onto browser
        // return_action() should stop it at order id check
        $this->gateway->return_action();
        $notices = wc_get_notices( 'error' );
        $this->assertIsArray($notices);
        if(is_array($notices[0]) && isset($notices[0]['notice'])){
            $this->assertEquals($notices[0]['notice'], 'The return action handler is not valid for the request.');
        } else {
            $this->assertEquals($notices[0], 'The return action handler is not valid for the request.');
        }
    }

     /**
     * Status vulnerability test
     * Copy and paste old success url to try set completed order back to processing
     * @test
     */
    public function userShouldNotBeAbleToChangeStatusBackToProcessing()
    {
        // Create order and process payment as usual until redirected to Gpay portal
        $this->tester->createApiTokenSuccess();
		$this->tester->createApiPurchaseSuccess();
        WC()->cart->empty_cart();
        WC()->cart->add_to_cart( $this->simple_product->get_id(), 3 );
        WC()->cart->calculate_totals();
        $order = $this->tester->create_order();
        $result = $this->gateway->process_payment($order->get_id()); // order_id and purchase_token in session now
        
        // Return from Gpay portal with success param
        $_GET = [
            'result' => \BinaryPay_Variable::STATUS_COMPLETED,
            'message' => 'The customer cancelled the purchase',
            'wc-api' => 'latitudepay_return_action',
            'token' => 'xxxxxxxxxxx', 
            'reference' => $order->get_id()
        ];
        $_GET['signature'] = $this->generate_signature($_GET); 
    
        // Make sure return action successful, token will be unset at this point
        $this->gateway->return_action();
        $notices = wc_get_notices( 'error' );
        $this->assertEmpty($notices);
        $headers = xdebug_get_headers();
        $this->assertContains(
            "X-Redirect-By: WordPress",
            $headers
        );
        $this->assertRegExp(
            "/order-received/",
            json_encode($headers)
        );
        // At this point plugin should have already set transaction_id and update order meta with processing=true

        // Owner then completed the order
        $order->update_status( 'completed', $message );

        // User open new tab IN COGNITO or on another browser and paste old success url, should fail on double processing
        // unset order_id from session to clear everything out (simulating in cognito or new browser)
        WC()->session->unset('order_id');
    
        $this->gateway->return_action();
        $notices = wc_get_notices( 'error' );
        $this->assertIsArray($notices);
        if(is_array($notices[0]) && isset($notices[0]['notice'])){
            $this->assertEquals($notices[0]['notice'], 'Invalid request');
        } else {
            $this->assertEquals($notices[0], 'Invalid request');
        }

        $this->assertEquals($order->get_status(), 'completed');
    } 
}